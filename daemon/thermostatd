#!/usr/bin/env python

import thermostat_api

import RPi.GPIO as GPIO
import re
import time
import yaml
import signal


class Relay:
  def __init__(self, channel):
    self.channel = channel

    GPIO.setup(self.channel, GPIO.OUT)
    self.SetState(False)

  def SetState(self, state):
    GPIO.output(self.channel, state)

  def CleanUp(self):
    self.SetState(False)
    GPIO.cleanup(self.channel)


def ReadSensorTemperature(serial):
  temperature_file = open("/sys/bus/w1/devices/%s/w1_slave" % serial)
  temperature_data = temperature_file.read()
  temperature_file.close()

  match = re.search("t=(\d+)", temperature_data)
  temperature = float(match.group(1)) / 1000

  return temperature


class Thermostat:
  def __init__(self, database_config="mysql_conf.yaml"):
    GPIO.setmode(GPIO.BOARD)

    database_config = yaml.load(open(database_config))
    self.thermostat_api = thermostat_api.ThermostatAPI(database_config)

    relays = self.thermostat_api.GetActiveRelays()
    self.active_relays = {
        relay["id"]: Relay(relay["channel"]) for relay in relays}
    for relay in relays:
      self.thermostat_api.UpdateRelayState(relay["id"], False)

    self.shutdown_requested = False
    for sig in (signal.SIGTERM, signal.SIGINT, signal.SIGHUP, signal.SIGQUIT):
      signal.signal(sig, self.SignalHandler) 

  def SignalHandler(self, signum=None, frame=None):
    self.shutdown_requested = True

  def DisableRelays(self, relays):
    for relay_id in list(relays):
      self.active_relays[relay_id].CleanUp()
      del self.active_relays[relay_id]

  def UpdateLoop(self, interval=5):
    while not self.shutdown_requested:
      print(self.active_relays)
      for sensor in self.thermostat_api.GetActiveSensors():
        temperature = ReadSensorTemperature(sensor["serial"])
        self.thermostat_api.UpdateSensorTemperature(sensor["id"], temperature)
        print(temperature)

      for relay in self.thermostat_api.GetRelayEvents():
        print(relay)
        if relay["id"] not in self.active_relays:
          self.active_relays[relay["id"]] = Relay(relay["channel"])

        if not relay["enabled"]:
          self.DisableRelays(relay)
        else:
          self.active_relays[relay["id"]].SetState(relay["new_state"])

        self.thermostat_api.UpdateRelayState(relay["id"], relay["new_state"])

      time.sleep(interval)

    self.DisableRelays(self.active_relays)


if __name__ == "__main__":
  Thermostat().UpdateLoop()
