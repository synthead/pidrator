#!/usr/bin/env python

import thermostat_api

import RPi.GPIO as GPIO
import re
import time
import yaml
import signal
import threading
import logging
import os


class Relay:
  def __init__(self, channel, state=False):
    logging.info("Initializing relay on channel %d.", channel)
    self.channel = channel
    self.state = None
    GPIO.setup(self.channel, GPIO.OUT)
    self.SetState(state)

  def SetState(self, state):
    logging.info(
        "Setting relay on channel %d to %s.", self.channel,
        ["off", "on"][state])
    self.state = state
    GPIO.output(self.channel, state)

  def CleanUp(self):
    logging.info("Stopping relay on channel %d.", self.channel)
    if self.state:
      self.SetState(False)
    GPIO.cleanup(self.channel)


def ReadSensorTemperature(serial):
  temperature_file = open("/sys/bus/w1/devices/%s/w1_slave" % serial)
  temperature_data = temperature_file.read()
  temperature_file.close()

  match = re.search("t=(\d+)", temperature_data)
  temperature = float(match.group(1)) / 1000

  return temperature


class Thermostat:
  def __init__(self, database_config="mysql_conf.yaml"):
    GPIO.setmode(GPIO.BOARD)

    database_config = yaml.load(open(database_config))
    self.thermostat_api = thermostat_api.ThermostatAPI(database_config)

    self.active_relays = {}
    for id, channel, state in self.thermostat_api.GetActiveRelays():
      self.EnableRelay(id, channel, state)

    self.shutdown_requested = threading.Event()
    for sig in (signal.SIGTERM, signal.SIGINT, signal.SIGHUP, signal.SIGQUIT):
      signal.signal(sig, self.SignalHandler) 

  def SignalHandler(self, signal_number=None, frame=None):
    logging.info("Received signal %s.", signal_number)
    self.shutdown_requested.set()

  def EnableRelay(self, id, channel, state=False):
    self.active_relays[id] = Relay(channel, state)
    self.thermostat_api.UpdateRelayState(id, state)

  def DisableRelay(self, id):
    self.active_relays[id].CleanUp()
    del self.active_relays[id]
    self.thermostat_api.UpdateRelayState(id, False)

  def UpdateLoop(self, interval=5):
    while not self.shutdown_requested.is_set():
      for id, serial in self.thermostat_api.GetActiveSensors():
        temperature = ReadSensorTemperature(serial)
        self.thermostat_api.UpdateSensorTemperature(id, temperature)

      for id, channel, state, enabled in self.thermostat_api.GetRelayEvents():
        if id not in self.active_relays:
          self.EnableRelay(id, channel, state)
        elif not enabled:
          self.DisableRelay(id)
        else:
          self.active_relays[id].SetState(state)

        self.thermostat_api.UpdateRelayState(id, state)

      self.shutdown_requested.wait(interval)

    active_relays = self.active_relays.copy()
    for id in active_relays:
      self.DisableRelay(id)


if __name__ == "__main__":
  logging.basicConfig(
      filename="%s.log" % os.path.basename(__file__),
      format="[%(asctime)s] %(levelname)s: %(message)s",
      datefmt="%Y-%m-%d %H:%M:%S",
      level=logging.INFO)

  logging.info("Started.")
  Thermostat().UpdateLoop()
  logging.info("Stopped.")
